---- point Matches (425 in 101 files) ----
CallAction.cpp (Call) line 6 : CCallAction::CCallAction(QSharedPointer<CCallObject> call,
CCallAction::CCallAction in CallAction.cpp (Call) :     QSharedPointer<CUser> roster = GLOBAL_USER->GetUserInfoRoster(m_szId);
CCallAction::getMessage in CallAction.cpp (Call) :             QSharedPointer<CUser> roster = GLOBAL_USER->GetUserInfoRoster(m_szId);
CallAction.h (Call) line 6 : #include <QSharedPointer>
CCallAction in CallAction.h (Call) :     explicit CCallAction(QSharedPointer<CCallObject> call,
CCallAction in CallAction.h (Call) :     QSharedPointer<CCallObject> m_Call;
CCallObject::OpenVideoWindow in CallObject.cpp (Call) :     QSharedPointer<CUser> roster
CCallObject::IsMonitor in CallObject.cpp (Call) :     QSharedPointer<CUser> roster = GLOBAL_USER->GetUserInfoRoster(this->GetId());
CallObjectQXmppWebrtc.h (Plugin\ProtocolQXmpp) line 6 : #include <QSharedPointer>
CChatAction::getContent in ChatAction.cpp (Message\ChatActions) :    QSharedPointer<CUser> roster = GLOBAL_USER->GetUserInfoRoster(m_szId);
CChatActionGroupChat::getContent in ChatActionGroupChat.cpp (Widgets\FrmGroupChat) :    QSharedPointer<CGroupChat> gc = GETMANAGER->GetManageGroupChat()->Get(m_szId);
Client.cpp (Client) line 82 : int CClient::ProcessRoster(QSharedPointer<CUserInfo> roster, void *para)
CClient in Client.h (Client) :     virtual int Register(QSharedPointer<CUserInfo> userInfo, 
CClient in Client.h (Client) :     virtual int ProcessRoster(QSharedPointer<CUserInfo> roster, void *para = NULL);
CClient in Client.h (Client) :     virtual int setlocaleUserInfo(QSharedPointer<CUserInfo> userInfo) = 0;
CClient in Client.h (Client) :      * @return QSharedPointer<CFileTransfer>：返回 CFileTransfer 对象指针  
CClient in Client.h (Client) :     virtual QSharedPointer<CFileTransfer> SendFile(const QString szId, 
CClient in Client.h (Client) :     void sigUpdateRosterUserInfo(const QString &szId, QSharedPointer<CUser> user);
CClient in Client.h (Client) :     void sigFileReceived(const QString &szId, QSharedPointer<CFileTransfer> file);
ClientXmpp.cpp (Plugin\ProtocolQXmpp) line 145 : int CClientXmpp::Register(QSharedPointer<CUserInfo> userInfo,
CClientXmpp::SendMessage in ClientXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CUser> roster = GLOBAL_USER->GetUserInfoRoster(szId);
ClientXmpp.cpp (Plugin\ProtocolQXmpp) line 291 : int CClientXmpp::setlocaleUserInfo(QSharedPointer<CUserInfo> userInfo)
ClientXmpp.cpp (Plugin\ProtocolQXmpp) line 311 : int CClientXmpp::SetUser(QSharedPointer<CManageUserQXmpp> user)
ClientXmpp.cpp (Plugin\ProtocolQXmpp) line 317 : QSharedPointer<CFileTransfer> CClientXmpp::SendFile(const QString szId, const QString &szFile, const QString &szDescription)
CClientXmpp::SendFile in ClientXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CUser> r = m_User->GetUserInfoRoster(szId);
CClientXmpp::SendFile in ClientXmpp.cpp (Plugin\ProtocolQXmpp) :         return QSharedPointer<CFileTransfer>();
CClientXmpp::SendFile in ClientXmpp.cpp (Plugin\ProtocolQXmpp) :         return QSharedPointer<CFileTransfer>();
CClientXmpp::SendFile in ClientXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CFileTransfer> file(new CFileTransferQXmpp(pJob));
CClientXmpp::slotRosterReceived in ClientXmpp.cpp (Plugin\ProtocolQXmpp) :         QSharedPointer<CUser> r = m_User->GetUserInfoRoster(jid);
CClientXmpp::slotvCardReceived in ClientXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CUser> r = m_User->GetUserInfoRoster(szJid);
CClientXmpp::slotvCardReceived in ClientXmpp.cpp (Plugin\ProtocolQXmpp) :         QSharedPointer<CUser> user(new CUser);
CClientXmpp::slotPresenceReceived in ClientXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CUser> roster = GLOBAL_USER->GetUserInfoRoster(bareJid);
CClientXmpp::slotItemAdded in ClientXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CUser> r = m_User->GetUserInfoRoster(szId);
CClientXmpp::slotItemChanged in ClientXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CUser> r = m_User->GetUserInfoRoster(szId);
CClientXmpp::slotMessageReceived in ClientXmpp.cpp (Plugin\ProtocolQXmpp) :         QSharedPointer<CUser> roster = GLOBAL_USER->GetUserInfoRoster(szId);
CClientXmpp::slotFileReceived in ClientXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CFileTransfer> file(new CFileTransferQXmpp(job));
CClientXmpp in ClientXmpp.h (Plugin\ProtocolQXmpp) :     virtual int Register(QSharedPointer<CUserInfo> userInfo,
CClientXmpp in ClientXmpp.h (Plugin\ProtocolQXmpp) :     virtual int setlocaleUserInfo(QSharedPointer<CUserInfo> userInfo);
CClientXmpp in ClientXmpp.h (Plugin\ProtocolQXmpp) :     int SetUser(QSharedPointer<CManageUserQXmpp> user);
CClientXmpp in ClientXmpp.h (Plugin\ProtocolQXmpp) :      * @return QSharedPointer<CFileTransfer>：返回 CFileTransfer 对象指针  
CClientXmpp in ClientXmpp.h (Plugin\ProtocolQXmpp) :     virtual QSharedPointer<CFileTransfer> SendFile(const QString szId, const QString &szFile, const QString &szDescription);
CClientXmpp in ClientXmpp.h (Plugin\ProtocolQXmpp) :     QSharedPointer<CManageUserQXmpp> m_User;
CClientXmpp in ClientXmpp.h (Plugin\ProtocolQXmpp) :     QSharedPointer<CUserInfo> m_RegisterUserInfo;//用户注册信息  
COperateRoster.cpp (UserInfo) line 13 : int COperateRoster::ProcessRoster(QSharedPointer<CUserInfo> roster, void* para)
COperateRoster in COperateRoster.h (UserInfo) :     virtual int ProcessRoster(QSharedPointer<CUserInfo> roster, void *para = NULL) = 0;
CPluginQRCode::Open in CPluginQRCode.cpp (Plugin\QRCode) :         m_FrmScanQRCode = QSharedPointer<CFrmScanQRcode>(new CFrmScanQRcode());
CPluginQRCode in CPluginQRCode.h (Plugin\QRCode) :     QSharedPointer<CFrmScanQRcode> m_FrmScanQRCode;
CCustomTreeView::CCustomTreeView in CustomTreeView.cpp (Widgets\FrmCustom) :     //设置上下文件菜单，自动触发void slotCustomContextMenuRequested(const QPoint &pos);  
CDlgAddRoster::on_txtJID_editingFinished in DlgAddRoster.cpp (Widgets\DlgAddRoster) :             QSharedPointer<CUser> user = GLOBAL_USER->GetUserInfoRoster(szJid);
CDlgCreateGroupChatRoom::on_pbOK_clicked in DlgCreateGroupChatRoom.cpp (Widgets\FrmGroupChat) :     QSharedPointer<CManageGroupChat> groupChat = GETMANAGER->GetManageGroupChat();
CDlgGroupChatInfo::CDlgGroupChatInfo in DlgGroupChatInfo.cpp (Widgets\FrmGroupChat) :     QSharedPointer<CGroupChat> gc = GETMANAGER->GetManageGroupChat()->Get(szId);
CDlgInviter::ItemInsertRoster in DlgInviter.cpp (Widgets\FrmGroupChat) :     QSharedPointer<CUser> roster = GLOBAL_USER->GetUserInfoRoster(szId);
CDlgInviter::ItemInsertRoster in DlgInviter.cpp (Widgets\FrmGroupChat) :     QSharedPointer<CUserInfo> info = roster->GetInfo();
DlgInviter.cpp (Widgets\FrmGroupChat) line 105 : int CDlgInviter::ProcessRoster(QSharedPointer<CUserInfo> roster, void *para)
CDlgInviter in DlgInviter.h (Widgets\FrmGroupChat) :     virtual int ProcessRoster(QSharedPointer<CUserInfo> roster, void *para = NULL);
CDlgInviter in DlgInviter.h (Widgets\FrmGroupChat) :     QSharedPointer<CGroupChat> m_GroupChat;
CDlgRegister::connected in DlgRegister.cpp (Widgets\DlgRegister) :     QSharedPointer<CUserInfo> user = GETMANAGER->GetManageUser()->NewUser()->GetInfo();
CDlgScreenShot::mouseMoveEvent in DlgScreenShot.cpp (Plugin\ScreenShot) :         QPoint pos = QCursor::pos();//e->pos();
CDlgScreenShot::mousePressEvent in DlgScreenShot.cpp (Plugin\ScreenShot) :         QPoint pos = QCursor::pos();
CDlgUservCard::CDlgUservCard in DlgUservCard.cpp (Widgets\DlgUservCard) :                          SIGNAL(sigUpdateRosterUserInfo(QString,QSharedPointer<CUser>)),
CDlgUservCard::CDlgUservCard in DlgUservCard.cpp (Widgets\DlgUservCard) :                          SLOT(slotUpdateRoster(QString, QSharedPointer<CUser>)));
DlgUservCard.cpp (Widgets\DlgUservCard) line 34 : CDlgUservCard::CDlgUservCard(QSharedPointer<CUserInfo> user, bool bModify, QWidget *parent) :
CDlgUservCard::CDlgUservCard in DlgUservCard.cpp (Widgets\DlgUservCard) :                          SIGNAL(sigUpdateRosterUserInfo(QString,QSharedPointer<CUser>)),
CDlgUservCard::CDlgUservCard in DlgUservCard.cpp (Widgets\DlgUservCard) :                          SLOT(slotUpdateRoster(QString, QSharedPointer<CUser>)));
CDlgUservCard::on_pbOK_clicked in DlgUservCard.cpp (Widgets\DlgUservCard) :     QSharedPointer<CUserInfo> userInfo = USER_INFO_LOCALE->GetInfo();
DlgUservCard.cpp (Widgets\DlgUservCard) line 168 : void CDlgUservCard::slotUpdateRoster(const QString& szId, QSharedPointer<CUser> userInfo)
DlgUservCard.h (Widgets\DlgUservCard) line 6 : #include <QSharedPointer>
CDlgUservCard in DlgUservCard.h (Widgets\DlgUservCard) :     explicit CDlgUservCard(QSharedPointer<CUserInfo> user, bool bModify = false, QWidget* parent = NULL);
CDlgUservCard in DlgUservCard.h (Widgets\DlgUservCard) :     void slotUpdateRoster(const QString& szId, QSharedPointer<CUser> userInfo);
CDlgUservCard in DlgUservCard.h (Widgets\DlgUservCard) :     QSharedPointer<CUserInfo> m_UserInfo;
CDownLoad::Work in DownLoad.cpp (Plugin\Update) :             /* Set a pointer to our struct to pass to the callback */
CDownLoad::Work in DownLoad.cpp (Plugin\Update) :             /* pass the struct pointer into the xferinfo function, note that this is
CDownLoad::WorkSingle in DownLoad.cpp (Plugin\Update) :     /* Set a pointer to our struct to pass to the callback */
CDownLoad::WorkSingle in DownLoad.cpp (Plugin\Update) :     /* pass the struct pointer into the xferinfo function, note that this is
CEmoticonsWidget::CEmoticonsWidget in EmoticonsWidget.cpp (Message) :             pageButton->setCursor(Qt::PointingHandCursor);
CEmoticonsWidget::CEmoticonsWidget in EmoticonsWidget.cpp (Message) :         button->setCursor(Qt::PointingHandCursor);
FileTransferAction.cpp (FileTransfer) line 13 : CFileTransferAction::CFileTransferAction(QSharedPointer<CFileTransfer> file, const QString &szId, const QTime &date, const bool &me)
CFileTransferAction in FileTransferAction.h (FileTransfer) :     CFileTransferAction(QSharedPointer<CFileTransfer> file, const QString &szId, const QTime &date, const bool &me);
CFileTransferAction in FileTransferAction.h (FileTransfer) :     QSharedPointer<CFileTransfer> m_File;
CFrameProcess::slotCaptureFrame in FrameProcess.cpp (Widgets\FrmVideo) :             //dst = CTool::ImageRotate(src, cv::Point(src.cols >> 1, src.rows >> 1), m_pCamera->GetOrientation());//有黑边  
CFrameProcess::slotCaptureFrame in FrameProcess.cpp (Widgets\FrmVideo) :         //dst = CTool::ImageRotate(src, cv::Point(inFrame.width() >> 1, inFrame.height() >> 1), m_pCamera->GetOrientation());  
CFrmAppList::CFrmAppList in FrmAppList.cpp (Widgets\FrmApp) :     check = connect(&m_AppList, SIGNAL(customContextMenuRequested(QPoint)),
CFrmAppList::CFrmAppList in FrmAppList.cpp (Widgets\FrmApp) :                     SLOT(slotCustomContextMenuRequested(QPoint)));
CFrmAppList::InitList in FrmAppList.cpp (Widgets\FrmApp) :     QSharedPointer<CManagePluginApp> plugin = GETMANAGER->GetManagePluginApp();
CFrmAppList::slotOpenApp in FrmAppList.cpp (Widgets\FrmApp) :     QSharedPointer<CManagePluginApp> plugin = GETMANAGER->GetManagePluginApp();
CFrmAppList::slotCloseApp in FrmAppList.cpp (Widgets\FrmApp) :     QSharedPointer<CManagePluginApp> plugin = GETMANAGER->GetManagePluginApp();
CFrmAppList::slotAboutApp in FrmAppList.cpp (Widgets\FrmApp) :     QSharedPointer<CManagePluginApp> plugin = GETMANAGER->GetManagePluginApp();
FrmAppList.cpp (Widgets\FrmApp) line 424 : void CFrmAppList::slotCustomContextMenuRequested(const QPoint &pos)
CFrmAppList in FrmAppList.h (Widgets\FrmApp) :     void slotCustomContextMenuRequested(const QPoint &pos);
CFrmContainer::CFrmContainer in FrmContainer.cpp (Widgets\FrmMessage) :     check = connect(GET_CLIENT.data(), SIGNAL(sigUpdateRosterUserInfo(QString,QSharedPointer<CUser>)),
CFrmContainer::CFrmContainer in FrmContainer.cpp (Widgets\FrmMessage) :                     SLOT(slotUpdateRoster(QString,QSharedPointer<CUser>)));
CFrmContainer::ShowDialog in FrmContainer.cpp (Widgets\FrmMessage) :     QSharedPointer<CUser> roster = GLOBAL_USER->GetUserInfoRoster(szId);
CFrmContainer::ShowDialog in FrmContainer.cpp (Widgets\FrmMessage) :         QSharedPointer<CUserInfo> info = roster->GetInfo();
CFrmContainer::ShowDialog in FrmContainer.cpp (Widgets\FrmMessage) :         QSharedPointer<CGroupChat> gc = GETMANAGER->GetManageGroupChat()->Get(szId);
FrmContainer.cpp (Widgets\FrmMessage) line 240 : void CFrmContainer::slotUpdateRoster(const QString& szId, QSharedPointer<CUser> user)
CFrmContainer::slotUpdateRoster in FrmContainer.cpp (Widgets\FrmMessage) :         QSharedPointer<CUser> roster = GLOBAL_USER->GetUserInfoRoster(szId);
CFrmContainer::slotUpdateRoster in FrmContainer.cpp (Widgets\FrmMessage) :             QSharedPointer<CUserInfo> info = roster->GetInfo();
CFrmContainer::slotRefresh in FrmContainer.cpp (Widgets\FrmMessage) :         QSharedPointer<CUser> roster = GLOBAL_USER->GetUserInfoRoster(szId);
CFrmContainer::slotRefresh in FrmContainer.cpp (Widgets\FrmMessage) :             QSharedPointer<CUserInfo> info = roster->GetInfo();
CFrmContainer in FrmContainer.h (Widgets\FrmMessage) :     void slotUpdateRoster(const QString& szId, QSharedPointer<CUser> user);
CFrmFavorites::CFrmFavorites in FrmFavorites.cpp (Widgets\FrmApp) :     check = connect(&m_List, SIGNAL(customContextMenuRequested(QPoint)),
CFrmFavorites::CFrmFavorites in FrmFavorites.cpp (Widgets\FrmApp) :                     SLOT(slotCustomContextMenuRequested(QPoint)));
CFrmFavorites::slotOpenApp in FrmFavorites.cpp (Widgets\FrmApp) :     QSharedPointer<CManagePluginApp> plugin = GETMANAGER->GetManagePluginApp();
CFrmFavorites::slotCloseApp in FrmFavorites.cpp (Widgets\FrmApp) :     QSharedPointer<CManagePluginApp> plugin = GETMANAGER->GetManagePluginApp();
CFrmFavorites::slotAboutApp in FrmFavorites.cpp (Widgets\FrmApp) :     QSharedPointer<CManagePluginApp> plugin = GETMANAGER->GetManagePluginApp();
CFrmFavorites::slotRemoveApp in FrmFavorites.cpp (Widgets\FrmApp) :     QSharedPointer<CManagePluginApp> plugin = GETMANAGER->GetManagePluginApp();
FrmFavorites.cpp (Widgets\FrmApp) line 219 : void CFrmFavorites::slotCustomContextMenuRequested(const QPoint &pos)
CFrmFavorites in FrmFavorites.h (Widgets\FrmApp) :     void slotCustomContextMenuRequested(const QPoint &pos);
CFrmGroupChat::CFrmGroupChat in FrmGroupChat.cpp (Widgets\FrmGroupChat) :     QSharedPointer<CManageGroupChat> mgc = GETMANAGER->GetManageGroupChat();
CFrmGroupChat::CFrmGroupChat in FrmGroupChat.cpp (Widgets\FrmGroupChat) :     check = connect(ui->lstMembers, SIGNAL(customContextMenuRequested(QPoint)),
CFrmGroupChat::CFrmGroupChat in FrmGroupChat.cpp (Widgets\FrmGroupChat) :                     SLOT(slotMemberCustomContextMenuRequested(QPoint)));
FrmGroupChat.cpp (Widgets\FrmGroupChat) line 218 : void CFrmGroupChat::slotMemberCustomContextMenuRequested(const QPoint &pos)
CFrmGroupChat::slotUpdateMessage in FrmGroupChat.cpp (Widgets\FrmGroupChat) :     std::vector<QSharedPointer<CChatAction> > msg = m_Room->GetMessage()->GetUnreadMessage();
CFrmGroupChat::RemoveMember in FrmGroupChat.cpp (Widgets\FrmGroupChat) :         QSharedPointer<CChatActionGroupChat> action(
FrmGroupChat.cpp (Widgets\FrmGroupChat) line 295 : int CFrmGroupChat::AppendMessageToOutputView(std::vector<QSharedPointer<CChatAction> > action)
CFrmGroupChat in FrmGroupChat.h (Widgets\FrmGroupChat) :     void slotMemberCustomContextMenuRequested(const QPoint &pos);
CFrmGroupChat in FrmGroupChat.h (Widgets\FrmGroupChat) :     int AppendMessageToOutputView(std::vector<QSharedPointer<CChatAction> > action);
CFrmGroupChat in FrmGroupChat.h (Widgets\FrmGroupChat) :     QSharedPointer<CGroupChat> m_Room;
FrmGroupChatFind.cpp (Widgets\FrmGroupChat) line 181 : void CFrmGroupChatFind::on_treeView_customContextMenuRequested(const QPoint &pos)
CFrmGroupChatFind in FrmGroupChatFind.h (Widgets\FrmGroupChat) :     void on_treeView_customContextMenuRequested(const QPoint &pos);
CFrmGroupChatList::CFrmGroupChatList in FrmGroupChatList.cpp (Widgets\FrmGroupChat) :     check = connect(&m_GroupList, SIGNAL(customContextMenuRequested(QPoint)),
CFrmGroupChatList::CFrmGroupChatList in FrmGroupChatList.cpp (Widgets\FrmGroupChat) :                     SLOT(slotCustomContextMenuRequested(QPoint)));
FrmGroupChatList.cpp (Widgets\FrmGroupChat) line 189 : void CFrmGroupChatList::slotCustomContextMenuRequested(const QPoint &pos)
CFrmGroupChatList::on_actionLeave_room_triggered in FrmGroupChatList.cpp (Widgets\FrmGroupChat) :     QSharedPointer<CGroupChat> gc = GETMANAGER->GetManageGroupChat()->Get(szId);
CFrmGroupChatList::slotJoinedGroup in FrmGroupChatList.cpp (Widgets\FrmGroupChat) :     QSharedPointer<CManageGroupChat> mgc = GETMANAGER->GetManageGroupChat();
CFrmGroupChatList::slotJoinedGroup in FrmGroupChatList.cpp (Widgets\FrmGroupChat) :     QSharedPointer<CGroupChat> gc = mgc->Get(szId);
CFrmGroupChatList::slotUpdateMessage in FrmGroupChatList.cpp (Widgets\FrmGroupChat) :     QSharedPointer<CGroupChat> gc = GETMANAGER->GetManageGroupChat()->Get(szId);
CFrmGroupChatList in FrmGroupChatList.h (Widgets\FrmGroupChat) :     void slotCustomContextMenuRequested(const QPoint &pos);
CFrmMain::slotUpdateLocaleUserInfo in FrmMain.cpp (Widgets\FrmMain) :     QSharedPointer<CUser> user = USER_INFO_LOCALE;
CFrmMain::slotUpdateLocaleUserInfo in FrmMain.cpp (Widgets\FrmMain) :     QSharedPointer<CUserInfo> info = user->GetInfo();
CFrmMain in FrmMain.h (Widgets\FrmMain) :     QSharedPointer<QWebView> m_weather;
CFrmMessage::Init in FrmMessage.cpp (Widgets\FrmMessage) :     check = connect(GET_CLIENT.data(), SIGNAL(sigUpdateRosterUserInfo(QString,QSharedPointer<CUser>)),
CFrmMessage::Init in FrmMessage.cpp (Widgets\FrmMessage) :                     SLOT(slotUpdateRoster(QString,QSharedPointer<CUser>)));
CFrmMessage::eventFilter in FrmMessage.cpp (Widgets\FrmMessage) :                     QSharedPointer<CManageFileTransfer> file = CGlobal::Instance()->GetManager()->GetFileTransfer();
FrmMessage.cpp (Widgets\FrmMessage) line 263 : int CFrmMessage::AppendMessageToOutputView(std::vector<QSharedPointer<CChatAction> > action)
CFrmMessage::slotMessageUpdate in FrmMessage.cpp (Widgets\FrmMessage) :     std::vector<QSharedPointer<CChatAction> > msg = m_User->GetMessage()->GetUnreadMessage();
FrmMessage.cpp (Widgets\FrmMessage) line 352 : void CFrmMessage::slotUpdateRoster(const QString &szId, QSharedPointer<CUser> user)
CFrmMessage::on_pbEmoticons_clicked in FrmMessage.cpp (Widgets\FrmMessage) :         QPoint pos = -QPoint(widget.sizeHint().width() / 2, widget.sizeHint().height()) - QPoint(0, 10);
CFrmMessage::on_pbSendFile_clicked in FrmMessage.cpp (Widgets\FrmMessage) :     QSharedPointer<CManageFileTransfer> file = CGlobal::Instance()->GetManager()->GetFileTransfer();
CFrmMessage in FrmMessage.h (Widgets\FrmMessage) :     int AppendMessageToOutputView(std::vector<QSharedPointer<CChatAction> > action);
CFrmMessage in FrmMessage.h (Widgets\FrmMessage) :     void slotUpdateRoster(const QString& szId, QSharedPointer<CUser> user);
CFrmMessage in FrmMessage.h (Widgets\FrmMessage) :     QSharedPointer<CUser> m_User;
CFrmRecentMsgList::InsertItem in FrmRecentMsgList.cpp (Widgets\FrmRecentMessage) :     QSharedPointer<CUser> roster = GLOBAL_USER->GetUserInfoRoster(szId);
CFrmRecentMsgList::InsertItem in FrmRecentMsgList.cpp (Widgets\FrmRecentMessage) :     QSharedPointer<CGroupChat> gc = GETMANAGER->GetManageGroupChat()->Get(szId);
CFrmRecentMsgList::UpdateItem in FrmRecentMsgList.cpp (Widgets\FrmRecentMessage) :     QSharedPointer<CGroupChat> gc = GETMANAGER->GetManageGroupChat()->Get(szId);
CFrmRecentMsgList::UpdateItem in FrmRecentMsgList.cpp (Widgets\FrmRecentMessage) :     QSharedPointer<CUser> roster = GLOBAL_USER->GetUserInfoRoster(szId);
CFrmRecentMsgList::slotMessageUpdate in FrmRecentMsgList.cpp (Widgets\FrmRecentMessage) :     QSharedPointer<CGroupChat> gc = GETMANAGER->GetManageGroupChat()->Get(szId);
CFrmRecentMsgList::slotMessageUpdate in FrmRecentMsgList.cpp (Widgets\FrmRecentMessage) :     QSharedPointer<CUser> roster = GLOBAL_USER->GetUserInfoRoster(szId);
CFrmRecentMsgList::slotMessageUpdate in FrmRecentMsgList.cpp (Widgets\FrmRecentMessage) :     QSharedPointer<CManageRecentMessage> recentMessage = CGlobal::Instance()->GetManager()->GetRecentMessage();
FrmRecentMsgList.cpp (Widgets\FrmRecentMessage) line 351 : void CFrmRecentMsgList::slotCustomContextMenuRequested(const QPoint &pos)
CFrmRecentMsgList::InitMenu in FrmRecentMsgList.cpp (Widgets\FrmRecentMessage) :     check = connect(&m_MsgList, SIGNAL(customContextMenuRequested(QPoint)),
CFrmRecentMsgList::InitMenu in FrmRecentMsgList.cpp (Widgets\FrmRecentMessage) :                     SLOT(slotCustomContextMenuRequested(QPoint)));
CFrmRecentMsgList::slotRemove in FrmRecentMsgList.cpp (Widgets\FrmRecentMessage) :     QSharedPointer<CManageRecentMessage> recentMessage = CGlobal::Instance()->GetManager()->GetRecentMessage();
CFrmRecentMsgList in FrmRecentMsgList.h (Widgets\FrmRecentMessage) :     void slotCustomContextMenuRequested(const QPoint &pos);
CFrmUserList::CFrmUserList in FrmUserList.cpp (Widgets\FrmUserList) :     check = connect(&m_UserList, SIGNAL(customContextMenuRequested(QPoint)),
CFrmUserList::CFrmUserList in FrmUserList.cpp (Widgets\FrmUserList) :                     SLOT(slotCustomContextMenuRequested(QPoint)));
CFrmUserList::CFrmUserList in FrmUserList.cpp (Widgets\FrmUserList) :     check = connect(GET_CLIENT.data(), SIGNAL(sigUpdateRosterUserInfo(QString,QSharedPointer<CUser>)),
CFrmUserList::CFrmUserList in FrmUserList.cpp (Widgets\FrmUserList) :                     SLOT(slotUpdateRosterUserInfo(QString,QSharedPointer<CUser>)));
FrmUserList.cpp (Widgets\FrmUserList) line 247 : int CFrmUserList::ProcessRoster(QSharedPointer<CUserInfo> roster, void *para)
CFrmUserList::slotUpdateMenu in FrmUserList.cpp (Widgets\FrmUserList) :         QSharedPointer<CUser> user = GLOBAL_USER->GetUserInfoRoster(bareJid);
CFrmUserList::slotUpdateMenu in FrmUserList.cpp (Widgets\FrmUserList) :         QSharedPointer<CUserInfo> info = user->GetInfo();
FrmUserList.cpp (Widgets\FrmUserList) line 454 : void CFrmUserList::slotCustomContextMenuRequested(const QPoint &pos)
CFrmUserList::slotMoveRoster in FrmUserList.cpp (Widgets\FrmUserList) :     QSharedPointer<CUser> user = GLOBAL_USER->GetUserInfoRoster(GetCurrentRoster());
CFrmUserList::slotSendFile in FrmUserList.cpp (Widgets\FrmUserList) :     QSharedPointer<CManageFileTransfer> file = CGlobal::Instance()->GetManager()->GetFileTransfer();
CFrmUserList::slotMonitor in FrmUserList.cpp (Widgets\FrmUserList) :     QSharedPointer<CUser> roster = GLOBAL_USER->GetUserInfoRoster(szId);
FrmUserList.cpp (Widgets\FrmUserList) line 631 : int CFrmUserList::ItemUpdateGroup(QSharedPointer<CUserInfo> info)
CFrmUserList::ItemInsertRoster in FrmUserList.cpp (Widgets\FrmUserList) :     QSharedPointer<CUser> roster = GLOBAL_USER->GetUserInfoRoster(szId);
CFrmUserList::ItemInsertRoster in FrmUserList.cpp (Widgets\FrmUserList) :     QSharedPointer<CUserInfo> info = roster->GetInfo();
FrmUserList.cpp (Widgets\FrmUserList) line 681 : QList<QStandardItem *> CFrmUserList::NewItemRoster(QSharedPointer<CUserInfo> info)
CFrmUserList::ItemUpdateRoster in FrmUserList.cpp (Widgets\FrmUserList) :     QSharedPointer<CUser> roster = GLOBAL_USER->GetUserInfoRoster(szId);
CFrmUserList::ItemUpdateRoster in FrmUserList.cpp (Widgets\FrmUserList) :     QSharedPointer<CUserInfo> info = roster->GetInfo();
FrmUserList.cpp (Widgets\FrmUserList) line 828 : void CFrmUserList::slotUpdateRosterUserInfo(const QString &szId, QSharedPointer<CUser> userInfo)
CFrmUserList in FrmUserList.h (Widgets\FrmUserList) :     virtual int ProcessRoster(QSharedPointer<CUserInfo> roster, void *para = NULL);
CFrmUserList in FrmUserList.h (Widgets\FrmUserList) :     void slotCustomContextMenuRequested(const QPoint &pos);
CFrmUserList in FrmUserList.h (Widgets\FrmUserList) :     int ItemUpdateGroup(QSharedPointer<CUserInfo> info);
CFrmUserList in FrmUserList.h (Widgets\FrmUserList) :     QList<QStandardItem *> NewItemRoster(QSharedPointer<CUserInfo> info);
CFrmUserList in FrmUserList.h (Widgets\FrmUserList) :     void slotUpdateRosterUserInfo(const QString &szId,  QSharedPointer<CUser> userInfo);
CFrmVideo::AdjustPlayer in FrmVideo.cpp (Widgets\FrmVideo) :     QPoint point(rect.topLeft());
CFrmVideo::AdjustPlayer in FrmVideo.cpp (Widgets\FrmVideo) :     point.setX(point.x() + (rect.width() - (rect.width() >> 2)));
CFrmVideo::AdjustPlayer in FrmVideo.cpp (Widgets\FrmVideo) :     point.setY(point.y() + (rect.height() - (rect.height() >> 2)));
CFrmVideo::AdjustPlayer in FrmVideo.cpp (Widgets\FrmVideo) :     QRect localeRect(point, rect.bottomRight());
Global.h (Global) line 7 : #include <QSharedPointer>
GroupChat.cpp (Widgets\FrmGroupChat) line 21 : QSharedPointer<CManageMessage> CGroupChat::GetMessage()
CGroupChat in GroupChat.h (Widgets\FrmGroupChat) :     virtual QSharedPointer<CManageMessage> GetMessage();
CGroupChat in GroupChat.h (Widgets\FrmGroupChat) :     QSharedPointer<CManageMessage> m_Message;
CGroupChatQxmpp::slotMessageReceived in GroupChatQxmpp.cpp (Plugin\ProtocolQXmpp) :         QSharedPointer<CManageMessage> msg = GetMessage();
CGroupChatQxmpp::slotMessageReceived in GroupChatQxmpp.cpp (Plugin\ProtocolQXmpp) :         QSharedPointer<CChatActionGroupChat> cgc(new CChatActionGroupChat(Id(), message.body(), szJid, QTime::currentTime(), false));
CGroupChatQxmpp::SendMessage in GroupChatQxmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CManageMessage> msg = GetMessage();
CGroupChatQxmpp::SendMessage in GroupChatQxmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CChatActionGroupChat> cgc(new CChatActionGroupChat(Id(), szMsg, QString(), QTime::currentTime(), true));
CLbsMotion::positionUpdated in LbsMotion.cpp (Plugin\Lbs) :         QMetaObject::invokeMethod(pMap, "addPolylinePoint",
CLbsTrack::positionUpdated in LbsTrack.cpp (Plugin\Lbs) :         QMetaObject::invokeMethod(pMap, "addPolylinePoint",
MainWindow::MainWindow in MainWindow.cpp :     m_Animation = QSharedPointer<QPropertyAnimation>(
MainWindow::MainWindow in MainWindow.cpp :     QSharedPointer<CClient> client = GET_CLIENT;
MainWindow::slotClientConnected in MainWindow.cpp :         QSharedPointer<CFrmMain> main(new CFrmMain(this));
MainWindow::slotClientDisconnected in MainWindow.cpp :         QSharedPointer<CFrmLogin> f(new CFrmLogin(this));
MainWindow::slotUpdateLocaleUserInfo in MainWindow.cpp :     QSharedPointer<CUser> user = USER_INFO_LOCALE;
MainWindow::slotUpdateLocaleUserInfo in MainWindow.cpp :     QSharedPointer<CUserInfo> info = user->GetInfo();
MainWindow::LoadTranslate in MainWindow.cpp :     m_TranslatorQt = QSharedPointer<QTranslator>(new QTranslator(this));
MainWindow::LoadTranslate in MainWindow.cpp :     m_TranslatorApp = QSharedPointer<QTranslator>(new QTranslator(this));
MainWindow.cpp line 1148 : int MainWindow::ComposeAvatarStatus(QSharedPointer<CUserInfo> info, QPixmap &outPixmap)
MainWindow in MainWindow.h :     static int ComposeAvatarStatus(QSharedPointer<CUserInfo> info,
MainWindow in MainWindow.h :     QSharedPointer<CFrmLogin> m_Login;
MainWindow in MainWindow.h :     QSharedPointer<CFrmMain> m_TableMain;
MainWindow in MainWindow.h :     QSharedPointer<QTranslator> m_TranslatorQt;
MainWindow in MainWindow.h :     QSharedPointer<QTranslator> m_TranslatorApp;
MainWindow in MainWindow.h :     QSharedPointer<QPropertyAnimation> m_Animation;
CManageCall::LoginInit in ManageCall.cpp (Call) :     QSharedPointer<CClient> client = GET_CLIENT;
CManageCall::LogoutClean in ManageCall.cpp (Call) :     QSharedPointer<CClient> client = GET_CLIENT;
CManageCall::LogoutClean in ManageCall.cpp (Call) :     QMap<QString, QSharedPointer<CCallObject> >::iterator it;
CManageCall::slotRosterStatusChanged in ManageCall.cpp (Call) :     QSharedPointer<CUser> roster = GLOBAL_USER->GetUserInfoRoster(szId);
CManageCall::Call in ManageCall.cpp (Call) :     QSharedPointer<CUser> roster = GLOBAL_USER->GetUserInfoRoster(szId);
CManageCall::Call in ManageCall.cpp (Call) :         QSharedPointer<CUser> callRoster = GLOBAL_USER->GetUserInfoRoster(szId);
CManageCall::Call in ManageCall.cpp (Call) :     QSharedPointer<CCallObject> call;
CManageCall::Call in ManageCall.cpp (Call) :     QSharedPointer<CCallAction> action(new CCallAction(call,
ManageCall.cpp (Call) line 138 : void CManageCall::slotCallReceived(QSharedPointer<CCallObject> call)
CManageCall::slotCallReceived in ManageCall.cpp (Call) :     QSharedPointer<CUser> roster = GLOBAL_USER->GetUserInfoRoster(call->GetId());
CManageCall::slotCallReceived in ManageCall.cpp (Call) :         QSharedPointer<CUser> callRoster = GLOBAL_USER->GetUserInfoRoster(szCallId);
CManageCall::slotCallReceived in ManageCall.cpp (Call) :     QSharedPointer<CCallAction> action(new CCallAction(call,
CManageCall::IsRun in ManageCall.cpp (Call) :     QMap<QString, QSharedPointer<CCallObject> >::iterator it = m_Call.find(szId);
CManageCall::Accept in ManageCall.cpp (Call) :     QMap<QString, QSharedPointer<CCallObject> >::iterator it
CManageCall::Stop in ManageCall.cpp (Call) :     QMap<QString, QSharedPointer<CCallObject> >::iterator it = m_Call.find(szId);
CManageCall::ProcessCommandCall in ManageCall.cpp (Call) :     QMap<QString, QSharedPointer<CCallObject> >::iterator it = m_Call.find(szId);
CManageCall::ProcessCommandCall in ManageCall.cpp (Call) :     QSharedPointer<CCallObject> call = it.value();
ManageCall.h (Call) line 5 : #include <QSharedPointer>
CManageCall::OnCall in ManageCall.h (Call) :               /*[out]*/QSharedPointer<CCallObject> &call,
CManageCall in ManageCall.h (Call) :     void slotCallReceived(QSharedPointer<CCallObject> call);
CManageCall in ManageCall.h (Call) :     QMap<QString, QSharedPointer<CCallObject> > m_Call;
CManageCallWebrtcXmpp::LoginInit in ManageCallWebrtcXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CClient> client = GETMANAGER->GetClient();
CManageCallWebrtcXmpp::LogoutClean in ManageCallWebrtcXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CClient> client = GETMANAGER->GetClient();
CManageCallWebrtcXmpp::Call in ManageCallWebrtcXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CUser> roster = GLOBAL_USER->GetUserInfoRoster(szId);
CManageCallWebrtcXmpp::Call in ManageCallWebrtcXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CUserInfo> info = roster->GetInfo();
CManageCallWebrtcXmpp::OnCall in ManageCallWebrtcXmpp.cpp (Plugin\ProtocolQXmpp) :        QSharedPointer<CCallObject> &call, bool bVideo)
CManageCallWebrtcXmpp::OnCall in ManageCallWebrtcXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CClient> client = GETMANAGER->GetClient();
CManageCallWebrtcXmpp::OnCall in ManageCallWebrtcXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CUser> roster = GLOBAL_USER->GetUserInfoRoster(szId);
CManageCallWebrtcXmpp::OnCall in ManageCallWebrtcXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CUserInfo> info = roster->GetInfo();
CManageCallWebrtcXmpp::OnCall in ManageCallWebrtcXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CCallObjectQXmppWebrtc> callWebrtc(
CManageCallWebrtcXmpp::WebrtcIqReceived in ManageCallWebrtcXmpp.cpp (Plugin\ProtocolQXmpp) :     QMap<QString, QSharedPointer<CCallObject> >::iterator it = m_Call.find(szId);
CManageCallWebrtcXmpp::WebrtcIqReceived in ManageCallWebrtcXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CCallObject> call = it.value();
CManageCallWebrtcXmpp::OnReciveCall in ManageCallWebrtcXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CClient> client = GETMANAGER->GetClient();
CManageCallWebrtcXmpp::OnReciveCall in ManageCallWebrtcXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CCallObjectQXmppWebrtc> call(new CCallObjectQXmppWebrtc(szId, bVideo, pCallManager));
CManageCallWebrtcXmpp::OnCall in ManageCallWebrtcXmpp.h (Plugin\ProtocolQXmpp) :                        QSharedPointer<CCallObject> &call,
CManageCallXmpp::LoginInit in ManageCallXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CClient> client = GETMANAGER->GetClient();
CManageCallXmpp::LogoutClean in ManageCallXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CClient> client = GETMANAGER->GetClient();
CManageCallXmpp::Call in ManageCallXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CUser> roster = GLOBAL_USER->GetUserInfoRoster(szId);
CManageCallXmpp::Call in ManageCallXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CUserInfo> info = roster->GetInfo();
CManageCallXmpp::OnCall in ManageCallXmpp.cpp (Plugin\ProtocolQXmpp) :             QSharedPointer<CCallObject> &call, bool bVideo)
CManageCallXmpp::OnCall in ManageCallXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CClient> client = GETMANAGER->GetClient();
CManageCallXmpp::OnCall in ManageCallXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CUser> roster = GLOBAL_USER->GetUserInfoRoster(szId);
CManageCallXmpp::OnCall in ManageCallXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CUserInfo> info = roster->GetInfo();
CManageCallXmpp::OnCall in ManageCallXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CCallObject> callObject(new CCallObjectQXmpp(pCall, bVideo));
CManageCallXmpp::slotReceived in ManageCallXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CCallObject> call(new CCallObjectQXmpp(pCall));
CManageCallXmpp::OnCall in ManageCallXmpp.h (Plugin\ProtocolQXmpp) :                        QSharedPointer<CCallObject> &call,
CManageFileTransfer::LoginInit in ManageFileTransfer.cpp (FileTransfer) :     check = connect(GET_CLIENT.data(), SIGNAL(sigFileReceived(QString,QSharedPointer<CFileTransfer>)),
CManageFileTransfer::LoginInit in ManageFileTransfer.cpp (FileTransfer) :                     SLOT(slotFileReceived(QString,QSharedPointer<CFileTransfer>)));
CManageFileTransfer::GetFileTransfers in ManageFileTransfer.cpp (FileTransfer) :     QList<QSharedPointer<CFileTransfer> > files = m_FileTransfer.values(szId);
CManageFileTransfer::SendFile in ManageFileTransfer.cpp (FileTransfer) :     QSharedPointer<CFileTransfer> file;
CManageFileTransfer::SendFile in ManageFileTransfer.cpp (FileTransfer) :     QSharedPointer<CUser> roster = GLOBAL_USER->GetUserInfoRoster(szId);
CManageFileTransfer::SendFile in ManageFileTransfer.cpp (FileTransfer) :     QSharedPointer<CFileTransferAction> action(new CFileTransferAction(file, szId, QTime::currentTime(), true));
ManageFileTransfer.cpp (FileTransfer) line 76 : void CManageFileTransfer::slotFileReceived(const QString& szId, QSharedPointer<CFileTransfer> file)
CManageFileTransfer::slotFileReceived in ManageFileTransfer.cpp (FileTransfer) :     QSharedPointer<CUser> roster = GLOBAL_USER->GetUserInfoRoster(szId);
CManageFileTransfer::slotFileReceived in ManageFileTransfer.cpp (FileTransfer) :     QSharedPointer<CFileTransferAction> action(new CFileTransferAction(file, szId, QTime::currentTime(), false));
CManageFileTransfer::slotFinished in ManageFileTransfer.cpp (FileTransfer) :     QMap<QString, QSharedPointer<CFileTransfer> >::iterator it = m_FileTransfer.find(szId);
CManageFileTransfer::CancelSend in ManageFileTransfer.cpp (FileTransfer) :     QMap<QString, QSharedPointer<CFileTransfer> >::iterator it = m_FileTransfer.find(szId);
CManageFileTransfer::ProcessCommand in ManageFileTransfer.cpp (FileTransfer) :     QMap<QString, QSharedPointer<CFileTransfer> >::iterator it = m_FileTransfer.find(szId);
ManageFileTransfer.cpp (FileTransfer) line 152 : int CManageFileTransfer::Accept(QSharedPointer<CFileTransfer> file)
ManageFileTransfer.cpp (FileTransfer) line 162 : int CManageFileTransfer::SaveAs(QSharedPointer<CFileTransfer> file)
ManageFileTransfer.h (FileTransfer) line 6 : #include <QSharedPointer>
CManageFileTransfer in ManageFileTransfer.h (FileTransfer) :     int Accept(QSharedPointer<CFileTransfer> file);
CManageFileTransfer in ManageFileTransfer.h (FileTransfer) :     int SaveAs(QSharedPointer<CFileTransfer> file);
CManageFileTransfer in ManageFileTransfer.h (FileTransfer) :     void slotFileReceived(const QString& szId, QSharedPointer<CFileTransfer> file);
CManageFileTransfer in ManageFileTransfer.h (FileTransfer) :     QMap<QString, QSharedPointer<CFileTransfer> > m_FileTransfer;
CManageGroupChat::SaveToStorage in ManageGroupChat.cpp (Widgets\FrmGroupChat) :         QMap<QString, QSharedPointer<CGroupChat> >::iterator it;
CManageGroupChat::slotLeave in ManageGroupChat.cpp (Widgets\FrmGroupChat) :     QMap<QString, QSharedPointer<CGroupChat> >::iterator it;
ManageGroupChat.h (Widgets\FrmGroupChat) line 6 : #include <QSharedPointer>
CManageGroupChat in ManageGroupChat.h (Widgets\FrmGroupChat) :     virtual QSharedPointer<CGroupChat> Get(const QString &szId) = 0;
CManageGroupChat in ManageGroupChat.h (Widgets\FrmGroupChat) :     QMap<QString, QSharedPointer<CGroupChat> > m_GroupChat;
CManageGroupChatQxmpp::Create in ManageGroupChatQxmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CGroupChatQxmpp> gc = Join1(szName, szPassword, szNick);
ManageGroupChatQxmpp.cpp (Plugin\ProtocolQXmpp) line 53 : QSharedPointer<CGroupChatQxmpp> CManageGroupChatQxmpp::Join1(const QString &szId, const QString &szPassword, const QString &szNick)
CManageGroupChatQxmpp::Join1 in ManageGroupChatQxmpp.cpp (Plugin\ProtocolQXmpp) :         return QSharedPointer<CGroupChatQxmpp>();
CManageGroupChatQxmpp::Join1 in ManageGroupChatQxmpp.cpp (Plugin\ProtocolQXmpp) :         return QSharedPointer<CGroupChatQxmpp>();
CManageGroupChatQxmpp::Join1 in ManageGroupChatQxmpp.cpp (Plugin\ProtocolQXmpp) :         QSharedPointer<CGroupChatQxmpp> groupChat(new CGroupChatQxmpp(room));
CManageGroupChatQxmpp::Join1 in ManageGroupChatQxmpp.cpp (Plugin\ProtocolQXmpp) :     return QSharedPointer<CGroupChatQxmpp>();
ManageGroupChatQxmpp.cpp (Plugin\ProtocolQXmpp) line 89 : QSharedPointer<CGroupChat> CManageGroupChatQxmpp::Get(const QString &szId)
CManageGroupChatQxmpp::Get in ManageGroupChatQxmpp.cpp (Plugin\ProtocolQXmpp) :     QMap<QString, QSharedPointer<CGroupChat> >::iterator it;
CManageGroupChatQxmpp::Get in ManageGroupChatQxmpp.cpp (Plugin\ProtocolQXmpp) :         return QSharedPointer<CGroupChat>();
CManageGroupChatQxmpp::slotInvitationReceived in ManageGroupChatQxmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CUser> user = GLOBAL_USER->GetUserInfoRoster(QXmppUtils::jidToBareJid(inviter));
CManageGroupChatQxmpp in ManageGroupChatQxmpp.h (Plugin\ProtocolQXmpp) :     virtual QSharedPointer<CGroupChat> Get(const QString &szId);
CManageGroupChatQxmpp in ManageGroupChatQxmpp.h (Plugin\ProtocolQXmpp) :     QSharedPointer<CGroupChatQxmpp> Join1(const QString &szId, const QString &szPassword, const QString &szNick);
ManageMessage.cpp (Message) line 22 : QSharedPointer<CChatAction> CManageMessage::AddMessage(const QString& szId, 
CManageMessage::AddMessage in ManageMessage.cpp (Message) :     QSharedPointer<CChatAction> chat(new CMessageAction(szId, szMessage, time, bMe));
ManageMessage.cpp (Message) line 32 : int CManageMessage::AddMessage(QSharedPointer<CChatAction> chatAction)
ManageMessage.cpp (Message) line 39 : std::vector<QSharedPointer<CChatAction> > CManageMessage::GetUnreadMessage()
CManageMessage::GetUnreadMessage in ManageMessage.cpp (Message) :     std::vector<QSharedPointer<CChatAction> > ret(m_Message.end() - m_nUnreadCount, m_Message.end());
ManageMessage.h (Message) line 6 : #include <QSharedPointer>
CManageMessage in ManageMessage.h (Message) :     QSharedPointer<CChatAction> AddMessage(const QString& szId, 
CManageMessage in ManageMessage.h (Message) :     int AddMessage(QSharedPointer<CChatAction> chatAction);
CManageMessage in ManageMessage.h (Message) :     std::vector<QSharedPointer<CChatAction> > GetUnreadMessage();
CManageMessage in ManageMessage.h (Message) :     std::vector<QSharedPointer<CChatAction> > m_Message;
CManageMessageDialog::ShowDialog in ManageMessageDialog.cpp (Manage) :         QSharedPointer<CUser> roster = GLOBAL_USER->GetUserInfoRoster(szId);
CManageMessageDialog::ShowDialog in ManageMessageDialog.cpp (Manage) :             QSharedPointer<CGroupChat> gc = GETMANAGER->GetManageGroupChat()->Get(szId);
ManageMessageDialog.h (Manage) line 6 : #include <QSharedPointer>
ManagePluginApp.h (Plugin) line 6 : #include <QSharedPointer>
Manager.cpp (Manage) line 90 : QSharedPointer<CClient> CManager::GetClient()
Manager.cpp (Manage) line 95 : QSharedPointer<CManageUser> CManager::GetManageUser()
Manager.cpp (Manage) line 100 : QSharedPointer<CManageCall> CManager::GetCall()
Manager.cpp (Manage) line 105 : QSharedPointer<CManageGroupChat> CManager::GetManageGroupChat()
Manager.cpp (Manage) line 110 : QSharedPointer<CUserInfo> CManager::NewUserInfo()
Manager.cpp (Manage) line 155 : QSharedPointer<CManageMessageDialog> CManager::GetManageMessageDialog()
CManager::GetManageMessageDialog in Manager.cpp (Manage) :     n_ManageMessageDialog = QSharedPointer<CManageMessageDialog>(new CManageMessageDialog);
CManager::GetManageMessageDialog in Manager.cpp (Manage) :     n_ManageMessageDialog = QSharedPointer<CManageMessageDialog>
Manager.cpp (Manage) line 169 : QSharedPointer<CManageRecentMessage> CManager::GetRecentMessage()
Manager.cpp (Manage) line 174 : QSharedPointer<CManageFileTransfer> CManager::GetFileTransfer()
Manager.cpp (Manage) line 179 : QSharedPointer<CManagePluginApp> CManager::GetManagePluginApp()
Manager.cpp (Manage) line 184 : QSharedPointer<CManagePluginProtocol> CManager::GetManagePluginProtocol()
Manager.h (Manage) line 10 : #include <QSharedPointer>
CManager in Manager.h (Manage) :     virtual QSharedPointer<CClient> GetClient();
CManager in Manager.h (Manage) :     virtual QSharedPointer<CManageUser> GetManageUser();
CManager in Manager.h (Manage) :     virtual QSharedPointer<CManageMessageDialog> GetManageMessageDialog();
CManager in Manager.h (Manage) :     virtual QSharedPointer<CManageRecentMessage> GetRecentMessage();
CManager in Manager.h (Manage) :     virtual QSharedPointer<CManageFileTransfer> GetFileTransfer();
CManager in Manager.h (Manage) :     virtual QSharedPointer<CManageCall> GetCall();
CManager in Manager.h (Manage) :     virtual QSharedPointer<CManageGroupChat> GetManageGroupChat();
CManager in Manager.h (Manage) :     virtual QSharedPointer<CManagePluginApp> GetManagePluginApp();
CManager in Manager.h (Manage) :     virtual QSharedPointer<CManagePluginProtocol> GetManagePluginProtocol();
CManager in Manager.h (Manage) :     virtual QSharedPointer<CUserInfo> NewUserInfo();
CManager in Manager.h (Manage) :     QSharedPointer<CManagePluginProtocol> m_ManagePluginProtocol;
CManager in Manager.h (Manage) :     QSharedPointer<CManagePluginApp> m_ManagePluginApp;
CManager in Manager.h (Manage) :     QSharedPointer<CManageFileTransfer> m_ManageFile;
CManager in Manager.h (Manage) :     QSharedPointer<CManageRecentMessage> m_ManageRecentMessage;
CManager in Manager.h (Manage) :     QSharedPointer<CManageMessageDialog> n_ManageMessageDialog;
CManageRecentMessage::slotMessageUpdate in ManageRecentMessage.cpp (Widgets\FrmRecentMessage) :     QSharedPointer<CUser> user = GLOBAL_USER->GetUserInfoRoster(szId);
CManageRecentMessage::slotMessageUpdate in ManageRecentMessage.cpp (Widgets\FrmRecentMessage) :         QSharedPointer<CGroupChat> gc = GETMANAGER->GetManageGroupChat()->Get(szId);
CManageUser::LoadRosterFromStorage in ManageUser.cpp (Manage) :             QSharedPointer<CUser> roster = NewUser();
CManageUser::SaveRosterToStorage in ManageUser.cpp (Manage) :         QMap<QString, QSharedPointer<CUser> >::iterator it;
ManageUser.cpp (Manage) line 213 : QSharedPointer<CUser> CManageUser::GetUserInfoLocale()
ManageUser.cpp (Manage) line 218 : QSharedPointer<CUser> CManageUser::GetUserInfoRoster(const QString &szId)
CManageUser::GetUserInfoRoster in ManageUser.cpp (Manage) :     QMap<QString, QSharedPointer<CUser> >::iterator it;
CManageUser::GetUserInfoRoster in ManageUser.cpp (Manage) :         QSharedPointer<CUser> roster;
ManageUser.cpp (Manage) line 232 : QSharedPointer<CUser> CManageUser::AddUserInfoRoster(const QString &szId)
CManageUser::AddUserInfoRoster in ManageUser.cpp (Manage) :     QSharedPointer<CUser> user;
CManageUser::ProcessRoster in ManageUser.cpp (Manage) :     QMap<QString, QSharedPointer<CUser> >::iterator it;
ManageUser.cpp (Manage) line 270 : QSharedPointer<CUser> CManageUser::NewUser()
CManageUser::NewUser in ManageUser.cpp (Manage) :     QSharedPointer<CUser> user(new CUser);
ManageUser.h (Manage) line 6 : #include <QSharedPointer>
CManageUser in ManageUser.h (Manage) :      * @return QSharedPointer<CUserInfo>:登录用户对象  
CManageUser in ManageUser.h (Manage) :     virtual QSharedPointer<CUser> GetUserInfoLocale();
CManageUser in ManageUser.h (Manage) :      * @return QSharedPointer<CUserInfo>:成功,返回好友对象.失败,返回空  
CManageUser in ManageUser.h (Manage) :     virtual QSharedPointer<CUser> GetUserInfoRoster(const QString &szId);
CManageUser in ManageUser.h (Manage) :      * @return QSharedPointer<CUserInfo>:成功,返回好友对象.失败,返回空  
CManageUser in ManageUser.h (Manage) :     virtual QSharedPointer<CUser> AddUserInfoRoster(const QString &szId);
CManageUser in ManageUser.h (Manage) :      * @return QSharedPointer<CUserInfo>:用户信息对象  
CManageUser in ManageUser.h (Manage) :     virtual QSharedPointer<CUser> NewUser();
CManageUser in ManageUser.h (Manage) :     QSharedPointer<CUser> m_UserLocale;
CManageUser in ManageUser.h (Manage) :     QMap<QString, QSharedPointer<CUser> > m_UseRoster;
ManageUserQXmpp.cpp (Plugin\ProtocolQXmpp) line 15 : QSharedPointer<CUser> CManageUserQXmpp::NewUser()
CManageUserQXmpp::NewUser in ManageUserQXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CUser> user(new CUser);
ManageUserQXmpp.cpp (Plugin\ProtocolQXmpp) line 25 :  * @return QSharedPointer<CUserInfo>:成功,返回好友对象.失败,返回空  
ManageUserQXmpp.cpp (Plugin\ProtocolQXmpp) line 27 : QSharedPointer<CUser> CManageUserQXmpp::AddUserInfoRoster(const QString &szId)
CManageUserQXmpp::AddUserInfoRoster in ManageUserQXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CUser> user =this->GetUserInfoRoster(szId);
CManageUserQXmpp::UpdateUserInfoRoster in ManageUserQXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CUser> roster = GetUserInfoRoster(jid);
CManageUserQXmpp::UpdateUserInfoRoster in ManageUserQXmpp.cpp (Plugin\ProtocolQXmpp) :     QSharedPointer<CUser> roster = GetUserInfoRoster(szBareJid);
CManageUserQXmpp in ManageUserQXmpp.h (Plugin\ProtocolQXmpp) :      * @return QSharedPointer<CUserInfo>:成功,返回好友对象.失败,返回空  
CManageUserQXmpp in ManageUserQXmpp.h (Plugin\ProtocolQXmpp) :     virtual QSharedPointer<CUser> AddUserInfoRoster(const QString &szId);
CManageUserQXmpp in ManageUserQXmpp.h (Plugin\ProtocolQXmpp) :     virtual QSharedPointer<CUser> NewUser();
CNmea::GetHttpOpenGts in Nmea.cpp (Plugin\Lbs) :     /* Set a pointer to our struct to pass to the callback */
CNmea::GetHttpOpenGts in Nmea.cpp (Plugin\Lbs) :             coord.setLatitude(eventMap["GPSPoint_lat"].toDouble());
CNmea::GetHttpOpenGts in Nmea.cpp (Plugin\Lbs) :             coord.setLongitude(eventMap["GPSPoint_lon"].toDouble());
CNmea::GetHttpOpenGts in Nmea.cpp (Plugin\Lbs) :                               eventMap["GPSPoint_accuracy"].toDouble());
PluginApp.cpp (Plugin) line 7 : #include <QSharedPointer>
CPluginApp::LoadTranslate in PluginApp.cpp (Plugin) :     m_TranslatorPlugin = QSharedPointer<QTranslator>(new QTranslator());
CPluginApp in PluginApp.h (Plugin) :     QSharedPointer<QTranslator> m_TranslatorPlugin;
PluginAppManage.h (Plugin) line 6 : #include <QSharedPointer>
CPluginAppManage::RegisterPlugin in PluginAppManage.h (Plugin) :                        QSharedPointer<CPluginApp> plugin);
CPluginAppManage in PluginAppManage.h (Plugin) :     QSharedPointer<CPluginApp> GetPlugin(const QString &szId);
CPluginAppManage in PluginAppManage.h (Plugin) :     std::list<QSharedPointer<CPluginApp> > GetAllPlugins();
CPluginAppManage in PluginAppManage.h (Plugin) :     std::map<QString, QSharedPointer<CPluginApp> > m_Plugins;
CPluginAppMotion::Open in PluginAppMotion.cpp (Plugin\Lbs) :         m_Main = QSharedPointer<CFrmLbsMain>(new CFrmLbsMain());
PluginAppMotion.h (Plugin\Lbs) line 7 : #include <QSharedPointer>
CPluginAppMotion in PluginAppMotion.h (Plugin\Lbs) :     QSharedPointer<CFrmLbsMain> m_Main;
PluginProtocol.cpp (Plugin) line 5 : #include <QSharedPointer>
CPluginProtocol::LoadTranslate in PluginProtocol.cpp (Plugin) :     m_TranslatorPlugin = QSharedPointer<QTranslator>(new QTranslator());
PluginProtocol.h (Plugin) line 10 : #include <QSharedPointer>
CPluginProtocol in PluginProtocol.h (Plugin) :     virtual QSharedPointer<CClient> GetClient() = 0;
CPluginProtocol in PluginProtocol.h (Plugin) :     virtual QSharedPointer<CManageUser> GetManageUser() = 0;
CPluginProtocol in PluginProtocol.h (Plugin) :     virtual QSharedPointer<CManageCall> GetCall() = 0;
CPluginProtocol in PluginProtocol.h (Plugin) :     virtual QSharedPointer<CManageGroupChat> GetManageGroupChat() = 0;
CPluginProtocol in PluginProtocol.h (Plugin) :     virtual QSharedPointer<CUserInfo> NewUserInfo() = 0;
CPluginProtocol in PluginProtocol.h (Plugin) :     QSharedPointer<QTranslator> m_TranslatorPlugin;
PluginProtocolQXmpp.cpp (Plugin\ProtocolQXmpp) line 29 : QSharedPointer<CClient> CPluginProtocolQXMPP::GetClient()
PluginProtocolQXmpp.cpp (Plugin\ProtocolQXmpp) line 34 : QSharedPointer<CManageUser> CPluginProtocolQXMPP::GetManageUser()
PluginProtocolQXmpp.cpp (Plugin\ProtocolQXmpp) line 39 : QSharedPointer<CManageCall> CPluginProtocolQXMPP::GetCall()
PluginProtocolQXmpp.cpp (Plugin\ProtocolQXmpp) line 44 : QSharedPointer<CManageGroupChat> CPluginProtocolQXMPP::GetManageGroupChat()
PluginProtocolQXmpp.cpp (Plugin\ProtocolQXmpp) line 49 : QSharedPointer<CUserInfo> CPluginProtocolQXMPP::NewUserInfo()
CPluginProtocolQXMPP::NewUserInfo in PluginProtocolQXmpp.cpp (Plugin\ProtocolQXmpp) :     return QSharedPointer<CUserInfo>(new CUserInfoXmpp);
CPluginProtocolQXMPP in PluginProtocolQXmpp.h (Plugin\ProtocolQXmpp) :     virtual QSharedPointer<CClient> GetClient();
CPluginProtocolQXMPP in PluginProtocolQXmpp.h (Plugin\ProtocolQXmpp) :     virtual QSharedPointer<CManageUser> GetManageUser();
CPluginProtocolQXMPP in PluginProtocolQXmpp.h (Plugin\ProtocolQXmpp) :     virtual QSharedPointer<CManageCall> GetCall();
CPluginProtocolQXMPP in PluginProtocolQXmpp.h (Plugin\ProtocolQXmpp) :     virtual QSharedPointer<CManageGroupChat> GetManageGroupChat();
CPluginProtocolQXMPP in PluginProtocolQXmpp.h (Plugin\ProtocolQXmpp) :     virtual QSharedPointer<CUserInfo> NewUserInfo();
CPluginProtocolQXMPP in PluginProtocolQXmpp.h (Plugin\ProtocolQXmpp) :     QSharedPointer<CClientXmpp> m_Client;
CPluginProtocolQXMPP in PluginProtocolQXmpp.h (Plugin\ProtocolQXmpp) :     QSharedPointer<CManageUserQXmpp> m_User;
CPluginProtocolQXMPP in PluginProtocolQXmpp.h (Plugin\ProtocolQXmpp) :     QSharedPointer<CManageGroupChatQxmpp> m_GroupChat;
CPluginProtocolQXMPP in PluginProtocolQXmpp.h (Plugin\ProtocolQXmpp) :     QSharedPointer<CManageCall> m_Call;
CPluginUpdate::CPluginUpdate in PluginUpdate.cpp (Plugin\Update) :     m_DlgUpdate = QSharedPointer<CDlgUpdate>(new CDlgUpdate);
CPluginUpdate::Open in PluginUpdate.cpp (Plugin\Update) :         m_DlgUpdate = QSharedPointer<CDlgUpdate>(new CDlgUpdate);
CPluginUpdate in PluginUpdate.h (Plugin\Update) :     QSharedPointer<CDlgUpdate> m_DlgUpdate;
CQRCode::ProcessMessage in QRCode.cpp (common) :         QSharedPointer<CUser> user = GLOBAL_USER->GetUserInfoRoster(szId);
CQRCode::ProcessMessage in QRCode.cpp (Plugin\QRCode) :         QSharedPointer<CUser> user = GLOBAL_USER->GetUserInfoRoster(szId);
Tool.cpp (common) line 315 : cv::Mat CTool::ImageRotate(cv::Mat & src, const cv::Point &_center,
CTool::ImageRotate in Tool.cpp (common) :     cv::Point2f center;
CTool::ImageRotate in Tool.h (common) :                                const cv::Point &_center,
User.cpp (UserInfo) line 16 : QSharedPointer<CUserInfo> CUser::GetInfo()
User.cpp (UserInfo) line 21 : QSharedPointer<CManageMessage> CUser::GetMessage()
User.h (UserInfo) line 5 : #include <QSharedPointer>
CUser in User.h (UserInfo) :     QSharedPointer<CUserInfo> GetInfo();
CUser in User.h (UserInfo) :     QSharedPointer<CManageMessage> GetMessage();
CUser in User.h (UserInfo) :     QSharedPointer<CUserInfo> m_Info;
CUser in User.h (UserInfo) :     QSharedPointer<CManageMessage> m_Message;
CWdgScreenEditor in WdgScreenEditor.h (Plugin\ScreenShot) :     QPoint m_curPos;
CWdgScreenEditor in WdgScreenEditor.h (Plugin\ScreenShot) :     QPoint m_oldPos;
